name: PR Validator
on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

# --------------------------------------------------------------------------
# GLOBAL PERMISSIONS & ENV
# --------------------------------------------------------------------------
permissions:
  contents: write
  pull-requests: write
  checks: write
  security-events: write

env:
  PR_NUM: ${{ github.event.number }}
  NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
  SONAR_PROJECT_KEY: CyborgCodeSyndicate_temp-project   # ← adjust if needed
  SONAR_ORG: CyborgCodeSyndicate                       # ← adjust if needed

# --------------------------------------------------------------------------
# JOB 1 ─ build / test / static‑analysis / reports
# --------------------------------------------------------------------------
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      pages-path: ${{ steps.stage.outputs.site }}

    steps:
      # ───────────── checkout & JDK ─────────────
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # ───────────── build & verify ─────────────
      - name: Build & Verify
        continue-on-error: true
        run: |
          mvn -B clean verify \
              -Ppr-validator \
              -Dnvd.api.key="$NVD_API_KEY" \
              --no-transfer-progress

      # ───── unit‑test report to GitHub ─────
      - uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit

      # ────────────────────────────────────────────────────────────────
      #  MERGE + UPLOAD  ►  SpotBugs  &  Dependency‑Check  SARIF
      # ────────────────────────────────────────────────────────────────
      - name: Merge SARIF files                         # <-- CHANGED
        if: always()
        id: merge-sarif
        shell: bash
        run: |
          set -e
          mkdir -p sarif-merge
          
          merge() {
            local pattern="$1"; local out="$2"
            mapfile -t FILES < <(find . -path "$pattern")
            [[ ${#FILES[@]} -eq 0 ]] && { echo "No matches for $pattern"; return; }
            jq -s '{version:"2.1.0", runs:(map(.runs) | add)}' "${FILES[@]}" > "sarif-merge/$out"
            echo "Merged ${#FILES[@]} files into sarif-merge/$out"
          }
          
          merge '*/target/spotbugs/spotbugs*.sarif'     spotbugs-merged.sarif
          merge '**/dependency-check-report.sarif'      dc-merged.sarif

      - name: Upload SpotBugs SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-merge/spotbugs.sarif

      - name: Upload Dependency‑Check SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-merge/dc-merged.sarif

      # ───────────── JaCoCo aggregate → SARIF ─────────────
      - name: Convert JaCoCo XML → SARIF
        if: always()
        uses: airtower-luna/convert-to-sarif@main
        with:
          tool: jacoco                                                  # ← lower‑case; converter expects this
          input_file: library-parent-pom/target/jacoco-aggregate/jacoco.xml
          sarif_file: sarif-merge/jacoco.sarif                          # ← write into the merge folder

      - name: Upload JaCoCo SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-merge/jacoco.sarif

      # ───────── stage Maven site → Pages artifact ─────────
      - name: Stage Maven site (HTML)
        if: always()
        run: mvn -B site:stage -Ppr-validator -DstagingDirectory=public -DskipTests

      - name: Move to PR sub-folder
        if: always()
        id: stage
        run: |
          mkdir -p site/pr-${PR_NUM}
          mv public/* site/pr-${PR_NUM}/
          echo "site=site" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-pages-artifact@v3
        if: always()
        with:
          path: ${{ steps.stage.outputs.site }}

  # --------------------------------------------------------------------------
  # JOB 2 ─ deploy static site to GitHub Pages
  # --------------------------------------------------------------------------
  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ env.PR_NUM }}/index.html
    steps:
      - uses: actions/deploy-pages@v4

  # --------------------------------------------------------------------------
  # JOB 3 ─ SonarCloud quality‑gate
  # --------------------------------------------------------------------------
  sonar:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: SonarCloud scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: >
          mvn -B sonar:sonar -Ppr-validator
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ env.SONAR_ORG }}
          -Dsonar.login=$SONAR_TOKEN
          -Dsonar.qualitygate.wait=true

  # --------------------------------------------------------------------------
  # JOB 4 ─ PR summary
  # --------------------------------------------------------------------------
  summary:
    needs: [ build, sonar, deploy-pages ]
    runs-on: ubuntu-latest
    steps:
      - name: PR-summary
        run: |
          {
            echo "## ⏱️ PR Quality-Gate Summary"
            echo ""
            echo "| Check | Status | View |"
            echo "|-------|--------|------|"
            echo "| **Unit Tests & Coverage HTML** | ${{ needs.build.result }} | [Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ env.PR_NUM }}/index.html) |"
            echo "| **SpotBugs / FindSecBugs** | attached to *Code scanning results* | open *Security → Code scanning* tab |"
            echo "| **OWASP Dependency‑Check** | attached to *Code scanning results* | open *Security → Code scanning* tab |"
            echo "| **JaCoCo Coverage SARIF** | converted & uploaded to *Code scanning results* | open *Security → Code scanning* tab |"
            echo "| **SonarCloud Quality Gate** | ${{ needs.sonar.result }} | [Dashboard](https://sonarcloud.io/dashboard?id=${{ env.SONAR_PROJECT_KEY }}) |"
          } >> "$GITHUB_STEP_SUMMARY"