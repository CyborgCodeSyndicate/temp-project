name: PR Validator
on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

# --------------------------------------------------------------------------
# GLOBAL PERMISSIONS & ENV          (no security-events scope needed now)
# --------------------------------------------------------------------------
permissions:
  contents: write
  pull-requests: write
  checks: write

env:
  PR_NUM: ${{ github.event.number }}
  NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
  SONAR_PROJECT_KEY: CyborgCodeSyndicate_temp-project   # ← adjust if needed
  SONAR_ORG: CyborgCodeSyndicate                       # ← adjust if needed

# --------------------------------------------------------------------------
# JOB 1 ─ build / tests / HTML reports
# --------------------------------------------------------------------------
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      pages-path: ${{ steps.stage.outputs.site }}

    steps:
      # ───────── checkout & JDK ─────────
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      # ───────── build & verify ─────────
      - name: Build & Verify
        continue-on-error: true
        run: |
          mvn -B clean verify \
              -Ppr-validator \
              -Dnvd.api.key="$NVD_API_KEY" \
              --no-transfer-progress

      # ───── unit‑test report in PR UI ─────
      - uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests
          path: '**/target/surefire-reports/*.xml'
          reporter: java-junit

      # ───────── stage Maven site (HTML) ─────────
      - name: Stage Maven site (HTML)
        if: always()
        run: mvn -B site:stage -Ppr-validator -DstagingDirectory=public -DskipTests

      - name: Move to PR sub‑folder
        if: always()
        id: stage
        run: |
          mkdir -p site/pr-${PR_NUM}
          mv public/* site/pr-${PR_NUM}/
          echo "site=site" >> "$GITHUB_OUTPUT"

      - uses: actions/upload-pages-artifact@v3
        if: always()
        with:
          path: ${{ steps.stage.outputs.site }}

      # (optional) also package the HTML site as a downloadable artifact
      - name: Upload HTML reports as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-html
          path: site/pr-${{ env.PR_NUM }}/

  # --------------------------------------------------------------------------
  # JOB 2 ─ deploy static site to GitHub Pages
  # --------------------------------------------------------------------------
  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ env.PR_NUM }}/index.html
    steps:
      - uses: actions/deploy-pages@v4

  # --------------------------------------------------------------------------
  # JOB 3 ─ SonarCloud quality‑gate
  # --------------------------------------------------------------------------
  sonar:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: SonarCloud scan
        env: { SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} }
        run: >
          mvn -B sonar:sonar -Ppr-validator
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.organization=${{ env.SONAR_ORG }}
          -Dsonar.login=$SONAR_TOKEN
          -Dsonar.qualitygate.wait=true

  # --------------------------------------------------------------------------
  # JOB 4 ─ PR summary comment
  # --------------------------------------------------------------------------
  summary:
    needs: [ build, sonar, deploy-pages ]
    runs-on: ubuntu-latest
    steps:
      - name: PR-summary
        run: |
          {
            echo "## ⏱️ PR Quality-Gate Summary"
            echo ""
            echo "| Check | Status | View |"
            echo "|-------|--------|------|"
            echo "| **Unit Tests** | ${{ needs.build.result }} | (see Checks tab) |"
            echo "| **HTML Code‑Quality Site** | published | [Open report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ env.PR_NUM }}/index.html) |"
            echo "| **SonarCloud Quality Gate** | ${{ needs.sonar.result }} | [Dashboard](https://sonarcloud.io/dashboard?id=${{ env.SONAR_PROJECT_KEY }}) |"
          } >> "$GITHUB_STEP_SUMMARY"