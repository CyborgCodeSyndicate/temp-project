name: API Tests

on:
  workflow_dispatch:
    inputs:
      tagsInclude:
        description: "Tags to include (comma-separated)"
        required: false
        default: "Regression"
      tagsExclude:
        description: "Tags to exclude (comma-separated)"
        required: false
        default: "Flaky"
      maxTestsPerJob:
        description: "Max test methods in each job (the plugin's maxMethods)"
        required: true
        default: "20"
      maxThreadsPerJob:
        description: "Max test methods in each job (the plugin's maxMethods)"
        required: true
        default: "10"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build all modules (including plugin + reqres-test-framework)
        run: mvn clean install -pl test-allocator-maven-plugin

      - name: Run plugin to split tests
        run: mvn test-compile -Psetup -pl reqres-test-framework -am  -DtestSplitter.enabled=true -DtestSplitter.junit.tags.include="${{ inputs.tagsInclude }}" -DtestSplitter.junit.tags.exclude="${{ inputs.tagsExclude }}" -DtestSplitter.maxMethods="${{ inputs.maxTestsPerJob }}" -DtestSplitter.test.engine=junit -DtestSplitter.json.output=grouped-tests -DtestSplitter.parallel.methods=true

      - name: Upload grouped-tests
        uses: actions/upload-artifact@v4
        with:
          name: grouped-tests
          path: grouped-tests.json


  create-matrix:
    needs: [ setup ]
    runs-on: ubuntu-latest
    outputs:
      testMatrix: ${{ steps.prepare-matrix.outputs.testMatrix }}
      matrixCount: ${{ steps.prepare-matrix.outputs.matrixCount }}
    steps:
      - name: Download grouped-tests artifact
        uses: actions/download-artifact@v4
        with:
          name: grouped-tests
          path: .

      - name: Prepare matrix
        id: prepare-matrix
        run: |
          echo "Reading grouped-tests.json..."
          cat grouped-tests.json

          MATRIX_JSON=$(cat grouped-tests.json)
          MATRIX_COUNT=$(echo "$MATRIX_JSON" | jq '. | length')

          echo "MATRIX_JSON=$MATRIX_JSON"
          echo "MATRIX_COUNT=MATRIX_COUNT"

          echo "testMatrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "matrixCount=$MATRIX_COUNT" >> $GITHUB_OUTPUT

  parallel-tests:
    needs: [ setup, create-matrix ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testGroup: ${{ fromJson(needs.create-matrix.outputs.testMatrix) }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download grouped-tests.json
        uses: actions/download-artifact@v4
        with:
          name: grouped-tests
          path: .

      - name: Parse subset
        id: subset
        run: |
          jq ".[] | select(.jobIndex==${{ matrix.testGroup.jobIndex  }})" grouped-tests.json > subset.json
          count=$(jq -r '.classes | length' subset.json 2>/dev/null || echo "0")
          if [[ -z "$count" ]]; then count="0"; fi
          echo "count=$count" >> $GITHUB_OUTPUT
          totalMethods=$(jq -r '.totalMethods' subset.json 2>/dev/null || echo "0")
          if [[ -z "$totalMethods" ]]; then totalMethods="0"; fi
          echo "totalMethods=$totalMethods" >> $GITHUB_OUTPUT


      - name: Run tests
        if: ${{ steps.subset.outputs.count != '0' }}
        run: |
          CLASSES=$(jq -r '.classes | join(",")' subset.json)
          echo "JobIndex ${{ matrix.testGroup.jobIndex }} => classes: $CLASSES"
          
          mvn clean install -pl reqres-test-framework -am -DskipTests
          
          mvn clean test -pl reqres-test-framework \
            -Dtest="$CLASSES" \
            -Dinclude.tags="${{ inputs.tagsInclude }}" \
            -Dexclude.tags="${{ inputs.tagsExclude }}" \
            -Djunit.jupiter.execution.parallel.config.fixed.parallelism=${{ inputs.maxThreadsPerJob }} \
            -Djunit.jupiter.execution.parallel.config.fixed.max-pool-size=${{ inputs.maxThreadsPerJob }} \
            -Dremote.driver.url="http://localhost:4444" \
            -Dheadless="true"

      - name: Upload Allure results
        if: ${{ steps.subset.outputs.count != '0' && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.testGroup.jobIndex }}
          path: reqres-test-framework/allure-results



  merge-allure:
    needs: [ parallel-tests, create-matrix ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download Allure artifacts dynamically
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: merged-allure
          merge-multiple: true

      - name: Install Official Allure CLI
        run: |
          curl -LO https://github.com/allure-framework/allure2/releases/download/2.29.0/allure-2.29.0.zip
          
          unzip allure-2.29.0.zip -d /tmp/allure
          
          sudo mv /tmp/allure/allure-2.29.0 /opt/allure
          
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
          
          allure --version          

      - name: Generate Allure report
        run: |
          allure generate merged-allure --clean -o allure-report
          ls -l allure-report          


      - name: Upload final Allure report
        uses: actions/upload-artifact@v4
        with:
          name: final-allure-report
          path: allure-report