name: Deploy Library

on:
  push:
    branches: [ main ]             # auto minor release
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: none
        type: choice
        options: [major, minor, patch, none]

permissions:
  contents: write
  packages: write

env:
  OWNER: ${{ github.repository_owner }}
  REPO:  ${{ github.event.repository.name }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Compute next version
        id: version
        shell: bash
        run: |
          set -e
          
          # 1) Determine requested bump type -------------------------------
          if [[ "${{ github.event_name }}" == "push" ]]; then
          bump="minor"          # auto release path
          else
          bump="${{ github.event.inputs.version_bump }}"
          fi
          branch="${GITHUB_REF#refs/heads/}"
          
          # 2) Safety: real bumps only from main ---------------------------
          if [[ "$bump" != "none" && "$branch" != "main" ]]; then
          echo "❌  $bump releases allowed only from main. Current branch: $branch"
          exit 1
          fi
          
          # 3) Ask Maven for parsed version components --------------------
          mvn -q build-helper:parse-version -Dexec.executable=true -Dexec.args=true
          maj=$(mvn -q -Dexpression=parsedVersion.majorVersion   -DforceStdout help:evaluate)
          min=$(mvn -q -Dexpression=parsedVersion.minorVersion   -DforceStdout help:evaluate)
          pat=$(mvn -q -Dexpression=parsedVersion.incrementalVersion -DforceStdout help:evaluate)
          qual=$(mvn -q -Dexpression=parsedVersion.qualifier     -DforceStdout help:evaluate)
          
          base="${maj}.${min}.${pat}"
          [[ -n "$qual" ]] && base="${base}-${qual}"
          
          case "$bump" in
          major) ((maj++)); min=0; pat=0; next="${maj}.${min}.${pat}" ;;
          minor) ((min++)); pat=0;        next="${maj}.${min}.${pat}" ;;
          patch) ((pat++));               next="${maj}.${min}.${pat}" ;;
          none)
           sha=$(git rev-parse --short HEAD)
           run=$GITHUB_RUN_ID
           next="${base}-SNAPSHOT-${sha}-${run}"
           ;;
          esac
          
          # 4) Export for later steps --------------------------------------
          {
          echo "current=${base}"
          echo "next=${next}"
          echo "bump=${bump}"
          echo "branch=${branch}"
          } >> "$GITHUB_OUTPUT"
          
          echo "Calculated version: $next"

      # Always set the working copy POM to the computed version
      - name: Set POM version
        run: >
          mvn -B versions:set
          -DnewVersion=${{ steps.version.outputs.next }}
          -DgenerateBackupPoms=false

      - name: Commit version bump & tag
        if: ${{ steps.version.outputs.bump != 'none' }}
        env:
          NEXT: ${{ steps.version.outputs.next }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore(release): $NEXT" || echo "Nothing to commit"
          git tag "v$NEXT"
          git push --follow-tags

      # Deploy uses the version now present in the workspace (snapshot or release)
      - name: Deploy to GitHub Packages
        run: |
          MODULES="library-parent-pom,commons,assertions,test-framework,ui-interactor,api-interactor,db-interactor,api-interactor-test-framework-adapter,db-interactor-test-framework-adapter,ui-interactor-test-framework-adapter"
          mvn -B -pl "$MODULES" -am -DskipTests \
              -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${OWNER}/${REPO} \
              deploy

      # ─── Write deployment summary ───────────────────────────
      - name: Deployment summary
        shell: bash
        run: |
          {
            echo "### 📦 Deployment Summary"
            echo ""
            echo "| Item | Value |"
            echo "|------|-------|"
            echo "| **Version published** | \`${{ steps.version.outputs.next }}\` |"
            echo "| **Branch** | \`${{ steps.version.outputs.branch }}\` |"
            if [[ "${{ steps.version.outputs.bump }}" == "none" ]]; then
              echo "| **Type** | Snapshot build |"
            else
              echo "| **Type** | Release — **${{ steps.version.outputs.bump }}** |"
            fi
          } >> "$GITHUB_STEP_SUMMARY"